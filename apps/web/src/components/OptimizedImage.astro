---
/**
 * Componente para cargar imágenes optimizadas con lazy loading
 * Soporta imágenes externas de Pexels con parámetros de optimización
 */
export interface Props {
  src: string;
  alt: string;
  class?: string;
  width?: number;
  height?: number;
  loading?: 'lazy' | 'eager';
  priority?: boolean;
}

const { 
  src, 
  alt, 
  class: className = '', 
  width,
  height,
  loading = 'lazy',
  priority = false
} = Astro.props;

// Función para optimizar URLs de Pexels
function optimizePexelsUrl(url: string, w?: number, h?: number): string {
  if (!url.includes('pexels.com')) return url;
  
  // Limpiar parámetros existentes
  const cleanUrl = url.split('?')[0];
  
  // Agregar parámetros de optimización
  const params = new URLSearchParams();
  if (w) params.append('w', w.toString());
  if (h) params.append('h', h.toString());
  params.append('auto', 'compress');
  params.append('cs', 'tinysrgb');
  params.append('fit', 'crop');
  
  return `${cleanUrl}?${params.toString()}`;
}

const optimizedSrc = optimizePexelsUrl(src, width, height);
const loadingAttr = priority ? 'eager' : loading;

// Generar placeholder blur (color base)
const placeholderColor = 'data:image/svg+xml,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 400 300\'%3E%3Crect fill=\'%23164b42\' width=\'400\' height=\'300\'/%3E%3C/svg%3E';
---

<img 
  src={optimizedSrc}
  alt={alt}
  class={className}
  width={width}
  height={height}
  loading={loadingAttr}
  decoding="async"
  style={priority ? '' : `background-image: url('${placeholderColor}'); background-size: cover;`}
  {...(priority ? { fetchpriority: 'high' } : {})}
/>
