---
/**
 * BackgroundCarousel.astro
 *
 * Full-bleed background carousel for hero sections.
 * Supports image and video slides with simple fade transitions.
 */
import OptimizedImage from './OptimizedImage.astro';
import OptimizedVideo from './OptimizedVideo.astro';

export interface Slide {
  type?: 'image' | 'video';
  src: string;
  alt?: string; // images
  poster?: string; // videos
}

export interface Props {
  slides: Slide[];
  interval?: number; // ms between slides
  transitionMs?: number; // fade duration
  width?: number; // hint for image optimization
  height?: number; // hint for image optimization
  class?: string;
  id?: string; // optional stable id for external controls
  renderDots?: boolean; // render internal dots
}

const {
  slides = [],
  interval = 5000 /* 5 segundos */,
  transitionMs = 1000,
  width,
  height,
  class: className = '',
  id,
  renderDots = true,
} = Astro.props as Props;

// Unique id to scope the script to this instance
const instanceId = id ?? `bg-carousel-${Math.random().toString(36).slice(2, 8)}`;
---

<div id={instanceId} class={`absolute inset-0 ${className}`} style={`--fade-ms:${transitionMs}ms;`} data-interval={interval}>
  <!-- Slides layer: background-only, non-interactive -->
  <div class="absolute inset-0 pointer-events-none -z-20">
    {slides.map((slide, idx) => (
      <div class={`carousel-slide absolute inset-0 transition-opacity duration-[var(--fade-ms)] ${idx === 0 ? 'opacity-100' : 'opacity-0'}`} data-index={idx} aria-hidden={idx === 0 ? 'false' : 'true'}>
        {slide.type === 'video' ? (
          <OptimizedVideo 
            src={slide.src}
            poster={slide.poster}
            alt={slide.alt ?? ''}
            class="w-full h-full object-cover"
            preload={idx === 0 ? 'auto' : 'metadata'}
            loading={idx === 0 ? 'eager' : 'lazy'}
            fetchpriority={idx === 0 ? 'high' : 'low'}
          />
        ) : (
          // Fallback to image
          <OptimizedImage 
            src={slide.src} 
            alt={slide.alt ?? ''} 
            width={width} 
            height={height} 
            loading={idx === 0 ? 'eager' : 'lazy'}
            priority={idx === 0}
            class="w-full h-full object-cover" />
        )}
      </div>
    ))}
  </div>



  <!-- Dots / pagination -->
  {renderDots && (
    <div class="absolute inset-x-0 bottom-6 z-10 flex items-center justify-center gap-3 pointer-events-auto">
      {slides.map((_, idx) => (
        <button type="button" class={`carousel-dot h-2 rounded-full transition-all duration-500 bg-white/40 ${idx === 0 ? 'w-8 bg-gradient-to-r from-blue-500 to-cyan-400' : 'w-2'}`} data-index={idx} aria-label={`Ir al slide ${idx + 1}`}></button>
      ))}
    </div>
  )}

  <script define:vars={{ instanceId }}>
    // Encuentra el elemento raÃ­z por ID
    const root = document.getElementById(instanceId);
    
    if (!root) {
      console.error(`BackgroundCarousel: Element with id "${instanceId}" not found`);
      throw new Error(`BackgroundCarousel initialization failed for ${instanceId}`);
    }

    const slides = Array.from(root.querySelectorAll('.carousel-slide'));
    const dots = Array.from(root.querySelectorAll('.carousel-dot'));
    const intervalMsAttr = root.getAttribute('data-interval');
    const intervalMs = intervalMsAttr ? parseInt(intervalMsAttr, 10) : 7000;

    let current = 0;
    let timer;

    console.log('[BackgroundCarousel] Initializing:', { 
      instanceId, 
      slidesCount: slides.length, 
      dotsCount: dots.length,
      intervalMs 
    });

    function updateDots(activeIndex) {
      dots.forEach((dot, idx) => {
        if (idx === activeIndex) {
          dot.style.background = 'linear-gradient(to right, #3b82f6, #06b6d4)';
          dot.style.width = '2rem';
        } else {
          dot.style.background = 'rgba(255,255,255,0.3)';
          dot.style.width = '0.75rem';
        }
      });
    }

    function show(i) {
      slides.forEach((el, idx) => {
        el.style.opacity = idx === i ? '1' : '0';
        el.setAttribute('aria-hidden', idx === i ? 'false' : 'true');
      });
      updateDots(i);
      current = i;
      console.log('[BackgroundCarousel] Changed to slide:', i);
    }

    function next() {
      const n = (current + 1) % slides.length;
      show(n);
    }

    function startAutoPlay() {
      stopAutoPlay();
      timer = window.setInterval(next, intervalMs);
      console.log('[BackgroundCarousel] Autoplay started, interval:', intervalMs);
    }

    function stopAutoPlay() {
      if (timer) {
        clearInterval(timer);
        timer = undefined;
        console.log('[BackgroundCarousel] Autoplay stopped');
      }
    }

    // Dot click handlers
    dots.forEach((dot, idx) => {
      dot.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        console.log('[BackgroundCarousel] Dot clicked:', idx);
        show(idx);
        startAutoPlay(); // Restart autoplay
      });
    });

    // Pause on hover
    const heroSection = root.closest('section');
    if (heroSection) {
      heroSection.addEventListener('mouseenter', () => {
        console.log('[BackgroundCarousel] Mouse enter - pausing');
        stopAutoPlay();
      });
      heroSection.addEventListener('mouseleave', () => {
        console.log('[BackgroundCarousel] Mouse leave - resuming');
        startAutoPlay();
      });
    }

    // Pause when tab not visible
    document.addEventListener('visibilitychange', () => {
      if (document.hidden) {
        console.log('[BackgroundCarousel] Tab hidden - pausing');
        stopAutoPlay();
      } else {
        console.log('[BackgroundCarousel] Tab visible - resuming');
        startAutoPlay();
      }
    });

    // Initialize
    show(0);
    startAutoPlay();
    console.log('[BackgroundCarousel] Initialization complete');
  </script>
</div>
